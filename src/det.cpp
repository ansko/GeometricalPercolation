#include <cmath>
#include <vector>

#include "../include/det.hpp"

extern float determinant(std::array<std::array<float, 3>, 3> M, int dim) {
    // stupid algorythm but faster than recursive...
    float det = 0;
    if (dim == 1)
        det = M[0][0];
    else if (dim == 2)
        det = M[0][0] * M[1][1] - M[1][0] * M[0][1];
    else if (dim == 3)
        det = M[0][0] * (M[1][1] * M[2][2] - M[2][1] * M[1][2]) -
              M[0][1] * (M[1][0] * M[2][2] - M[1][2] * M[2][0]) +
              M[0][2] * (M[1][0] * M[2][1] - M[2][0] * M[1][1]);
    else if (dim == 4)
        det = M[0][0] * (M[1][1] * (M[2][2] * M[3][3] - M[3][2] * M[2][3]) -
                         M[1][2] * (M[2][1] * M[3][3] - M[3][1] * M[2][3]) +
                         M[1][3] * (M[2][1] * M[3][2] - M[3][1] * M[2][2])) -
              M[0][1] * (M[1][0] * (M[2][2] * M[3][3] - M[2][3] * M[3][2]) -
                         M[1][2] * (M[2][0] * M[3][3] - M[3][0] * M[2][3]) +
                         M[1][3] * (M[2][0] * M[3][2] - M[3][0] * M[2][2])) +
              M[0][2] * (M[1][0] * (M[2][1] * M[3][3] - M[2][3] * M[3][1]) -
                         M[1][1] * (M[2][0] * M[3][3] - M[3][0] * M[2][3]) +
                         M[1][3] * (M[2][0] * M[3][1] - M[2][1] * M[3][0])) -
              M[0][3] * (M[1][0] * (M[2][1] * M[3][2] - M[2][2] * M[3][1]) -
                         M[1][1] * (M[2][0] * M[3][2] - M[2][2] * M[3][0]) +
                         M[1][2] * (M[2][0] * M[3][1] - M[2][1] * M[3][0]));
    return det;
}
